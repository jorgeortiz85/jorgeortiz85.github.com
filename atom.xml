<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Uncountably Many</title>
 <link href="http://uncountablymany.com/atom.xml" rel="self"/>
 <link href="http://uncountablymany.com/"/>
 <updated>2010-02-15T13:06:01-08:00</updated>
 <id>http://uncountablymany.com/</id>
 <author>
   <name>Jorge Ortiz</name>
   <email>jorge.ortiz@gmail.com</email>
 </author>
 
 <entry>
   <title>Does pattern matching break encapsulation?</title>
   <link href="http://uncountablymany.com/2009/07/24/pattern-matching-encapsulation.html"/>
   <updated>2009-07-24T00:00:00-07:00</updated>
   <id>http://uncountablymany.com/2009/07/24/pattern-matching-encapsulation</id>
   <content type="html">&lt;p&gt;Scala attempts to unify functional and object-oriented programming. One of the concepts that Scala borrows from functional programming is &lt;em&gt;pattern matching&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pattern matching can be used anywhere you might use &lt;code&gt;switch/case&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;(Int)Int&quot; id=&quot;7276&quot;&gt;fib&lt;/a&gt;(&lt;a title=&quot;Int&quot; id=&quot;7278&quot;&gt;n&lt;/a&gt;: &lt;span title=&quot;Int&quot;&gt;Int&lt;/span&gt;): &lt;span title=&quot;Int&quot;&gt;Int&lt;/span&gt; = &lt;a href=&quot;#7278&quot; title=&quot;Int&quot;&gt;n&lt;/a&gt; &lt;span title=&quot;Int&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
      &lt;span title=&quot;Int(0)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span title=&quot;Int(0)&quot; class=&quot;int&quot;&gt;0&lt;/span&gt; =&amp;gt; &lt;span title=&quot;Int(0)&quot; class=&quot;int&quot;&gt;0&lt;/span&gt;
      &lt;span title=&quot;Int(1)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span title=&quot;Int(1)&quot; class=&quot;int&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span title=&quot;Int(1)&quot; class=&quot;int&quot;&gt;1&lt;/span&gt;
      &lt;span title=&quot;Int&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;a title=&quot;Int&quot; id=&quot;7279&quot;&gt;n&lt;/a&gt; =&amp;gt; &lt;a href=&quot;#7276&quot; title=&quot;(Int)Int&quot;&gt;fib&lt;/a&gt;(&lt;a href=&quot;#7279&quot; title=&quot;Int&quot;&gt;n&lt;/a&gt;&lt;span title=&quot;(Int)Int&quot;&gt;-&lt;/span&gt;&lt;span title=&quot;Int(1)&quot; class=&quot;int&quot;&gt;1&lt;/span&gt;) &lt;a title=&quot;(Int)Int&quot; id=&quot;3111&quot;&gt;+&lt;/a&gt; &lt;a href=&quot;#7276&quot; title=&quot;(Int)Int&quot;&gt;fib&lt;/a&gt;(&lt;a href=&quot;#7279&quot; title=&quot;Int&quot;&gt;n&lt;/a&gt;&lt;span title=&quot;(Int)Int&quot;&gt;-&lt;/span&gt;&lt;span title=&quot;Int(2)&quot; class=&quot;int&quot;&gt;2&lt;/span&gt;)
    }
&lt;/pre&gt;

&lt;p&gt;You can also use pattern matching to &quot;break open&quot; case classes and access the parameters that were used to construct it:&lt;/p&gt;

&lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;a title=&quot;trait Point extends java.lang.Object&quot; id=&quot;8516&quot;&gt;Point&lt;/a&gt;
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;a title=&quot;class CartesianPoint extends java.lang.Object with PatternMatchingEncapsulation.ex2.Point with ScalaObject with Product&quot; id=&quot;8593&quot;&gt;CartesianPoint&lt;/a&gt;(&lt;a title=&quot;Double&quot; id=&quot;8665&quot;&gt;x&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;, &lt;a title=&quot;Double&quot; id=&quot;8666&quot;&gt;y&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;a href=&quot;#8516&quot; title=&quot;PatternMatchingEncapsulation.ex2.Point&quot;&gt;Point&lt;/a&gt;

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;(PatternMatchingEncapsulation.ex2.Point)Boolean&quot; id=&quot;8520&quot;&gt;isSpecial&lt;/a&gt;(&lt;a title=&quot;PatternMatchingEncapsulation.ex2.Point&quot; id=&quot;8639&quot;&gt;point&lt;/a&gt;: &lt;a href=&quot;#8516&quot; title=&quot;PatternMatchingEncapsulation.ex2.Point&quot;&gt;Point&lt;/a&gt;): &lt;span title=&quot;Boolean&quot;&gt;Boolean&lt;/span&gt; = &lt;a href=&quot;#8639&quot; title=&quot;PatternMatchingEncapsulation.ex2.Point&quot;&gt;point&lt;/a&gt; &lt;span title=&quot;Boolean&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
      &lt;span title=&quot;Boolean(true)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; CartesianPoint(&lt;a title=&quot;Double&quot; id=&quot;8658&quot;&gt;x&lt;/a&gt;, &lt;a title=&quot;Double&quot; id=&quot;8659&quot;&gt;y&lt;/a&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;a href=&quot;#8658&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;a href=&quot;#8658&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Double)Double&quot;&gt;+&lt;/span&gt; &lt;a href=&quot;#8659&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;a href=&quot;#8659&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span title=&quot;Double(25.0)&quot; class=&quot;double&quot;&gt;25.0&lt;/span&gt; =&amp;gt; &lt;span title=&quot;Boolean(true)&quot; class=&quot;keyword&quot;&gt;true&lt;/span&gt;
      &lt;span title=&quot;Boolean(false)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span title=&quot;Boolean(false)&quot; class=&quot;keyword&quot;&gt;false&lt;/span&gt;
    }
&lt;/pre&gt;

&lt;p&gt;One criticism of pattern matching is that it violates &lt;em&gt;encapsulation&lt;/em&gt;, the object-oriented principle that says the interface of a class should be independent of its implementation details. If we change the implementation details of &lt;code&gt;CartesianPoint&lt;/code&gt;, we'll break the pattern matching statements that depended on those details.&lt;/p&gt;

&lt;h2&gt;Extractors&lt;/h2&gt;

&lt;p&gt;Scala relies on extractors to make pattern matching more object-oriented. Extractors define a &quot;view&quot; on a particular kind of object. This allows Scala code that uses pattern matching to maintain encapsulation: just provide a &quot;view&quot; into your new implementation that matches the old one.&lt;/p&gt;

&lt;p&gt;Suppose we wanted to implement Points in terms of polar coordinates instead of Cartesian coordinates:&lt;/p&gt;

  &lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;a title=&quot;trait Point extends java.lang.Object&quot; id=&quot;8670&quot;&gt;Point&lt;/a&gt;
    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;a title=&quot;class PolarPoint extends java.lang.Object with PatternMatchingEncapsulation.ex3.Point with ScalaObject with Product&quot; id=&quot;8696&quot;&gt;PolarPoint&lt;/a&gt;(&lt;a title=&quot;Double&quot; id=&quot;8886&quot;&gt;radius&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;, &lt;a title=&quot;Double&quot; id=&quot;8887&quot;&gt;theta&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;a href=&quot;#8670&quot; title=&quot;PatternMatchingEncapsulation.ex3.Point&quot;&gt;Point&lt;/a&gt;

    &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;a title=&quot;object PatternMatchingEncapsulation.ex3.CartesianPoint&quot; id=&quot;8674&quot;&gt;CartesianPoint&lt;/a&gt; {
      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;(Double,Double)PatternMatchingEncapsulation.ex3.Point&quot; id=&quot;8713&quot;&gt;apply&lt;/a&gt;(&lt;a title=&quot;Double&quot; id=&quot;8716&quot;&gt;x&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;, &lt;a title=&quot;Double&quot; id=&quot;8717&quot;&gt;y&lt;/a&gt;: &lt;span title=&quot;Double&quot;&gt;Double&lt;/span&gt;): &lt;a href=&quot;#8670&quot; title=&quot;PatternMatchingEncapsulation.ex3.Point&quot;&gt;Point&lt;/a&gt; = {
        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;a title=&quot;Double&quot; id=&quot;8718&quot;&gt;radius&lt;/a&gt; = &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;a title=&quot;(Double)Double&quot; id=&quot;8780&quot;&gt;sqrt&lt;/a&gt;(&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Double)Double&quot;&gt;+&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;)
        &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; &lt;a title=&quot;Double&quot; id=&quot;8719&quot;&gt;theta&lt;/a&gt; =
          &lt;span title=&quot;Double&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;==&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt; &lt;span title=&quot;(Boolean)Boolean&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;==&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;) &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;Double&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;==&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt; &lt;span title=&quot;(Boolean)Boolean&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;) &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;=&amp;gt; Double&quot;&gt;Pi&lt;/span&gt;&lt;span title=&quot;(Int)Double&quot;&gt;/&lt;/span&gt;&lt;span title=&quot;Int(2)&quot; class=&quot;int&quot;&gt;2&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;Double&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;==&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt; &lt;span title=&quot;(Boolean)Boolean&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;) &lt;span title=&quot;Int(3)&quot; class=&quot;int&quot;&gt;3&lt;/span&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;=&amp;gt; Double&quot;&gt;Pi&lt;/span&gt;&lt;span title=&quot;(Int)Double&quot;&gt;/&lt;/span&gt;&lt;span title=&quot;Int(2)&quot; class=&quot;int&quot;&gt;2&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;Double&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Int)Boolean&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span title=&quot;Int(0)&quot; class=&quot;int&quot;&gt;0&lt;/span&gt; &lt;span title=&quot;(Boolean)Boolean&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;a title=&quot;(Double)Boolean&quot; id=&quot;3432&quot;&gt;&amp;gt;=&lt;/a&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;) &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;(Double)Double&quot;&gt;atan&lt;/span&gt;(&lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt;)
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;Double&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt; &lt;span title=&quot;(Int)Boolean&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span title=&quot;Int(0)&quot; class=&quot;int&quot;&gt;0&lt;/span&gt; &lt;span title=&quot;(Boolean)Boolean&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt; &lt;span title=&quot;(Double)Boolean&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span title=&quot;Double(0.0)&quot; class=&quot;double&quot;&gt;0.0&lt;/span&gt;) &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;(Double)Double&quot;&gt;atan&lt;/span&gt;(&lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt;) &lt;span title=&quot;(Double)Double&quot;&gt;+&lt;/span&gt; &lt;span title=&quot;Int(2)&quot; class=&quot;int&quot;&gt;2&lt;/span&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;=&amp;gt; Double&quot;&gt;Pi&lt;/span&gt;
          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;(Double)Double&quot;&gt;atan&lt;/span&gt;(&lt;a href=&quot;#8717&quot; title=&quot;Double&quot;&gt;y&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;/&lt;/span&gt;&lt;a href=&quot;#8716&quot; title=&quot;Double&quot;&gt;x&lt;/a&gt;) &lt;span title=&quot;(Double)Double&quot;&gt;+&lt;/span&gt; &lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;span title=&quot;=&amp;gt; Double&quot;&gt;Pi&lt;/span&gt;
        &lt;a href=&quot;#8696&quot; title=&quot;(Double,Double)PatternMatchingEncapsulation.ex3.PolarPoint&quot;&gt;PolarPoint&lt;/a&gt;(&lt;a href=&quot;#8718&quot; title=&quot;Double&quot;&gt;radius&lt;/a&gt;, &lt;a href=&quot;#8719&quot; title=&quot;Double&quot;&gt;theta&lt;/a&gt;)
      }
      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;(PatternMatchingEncapsulation.ex3.Point)Option[(Double, Double)]&quot; id=&quot;8714&quot;&gt;unapply&lt;/a&gt;(&lt;a title=&quot;PatternMatchingEncapsulation.ex3.Point&quot; id=&quot;8888&quot;&gt;point&lt;/a&gt;: &lt;a href=&quot;#8670&quot; title=&quot;PatternMatchingEncapsulation.ex3.Point&quot;&gt;Point&lt;/a&gt;) = &lt;a href=&quot;#8888&quot; title=&quot;PatternMatchingEncapsulation.ex3.Point&quot;&gt;point&lt;/a&gt; &lt;span title=&quot;Option[(Double, Double)]&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
        &lt;span title=&quot;Some[(Double, Double)]&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; PolarPoint(&lt;a title=&quot;Double&quot; id=&quot;8890&quot;&gt;r&lt;/a&gt;, &lt;a title=&quot;Double&quot; id=&quot;8891&quot;&gt;th&lt;/a&gt;) =&amp;gt;
          &lt;span title=&quot;((Double, Double))Some[(Double, Double)]&quot;&gt;Some&lt;/span&gt;(&lt;span title=&quot;(Double,Double)(Double, Double)&quot;&gt;(&lt;/span&gt;&lt;a href=&quot;#8890&quot; title=&quot;Double&quot;&gt;r&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;a title=&quot;(Double)Double&quot; id=&quot;8771&quot;&gt;cos&lt;/a&gt;(&lt;a href=&quot;#8891&quot; title=&quot;Double&quot;&gt;th&lt;/a&gt;), &lt;a href=&quot;#8890&quot; title=&quot;Double&quot;&gt;r&lt;/a&gt;&lt;span title=&quot;(Double)Double&quot;&gt;*&lt;/span&gt;&lt;span title=&quot;object Math&quot;&gt;Math&lt;/span&gt;.&lt;a title=&quot;(Double)Double&quot; id=&quot;8770&quot;&gt;sin&lt;/a&gt;(&lt;a href=&quot;#8891&quot; title=&quot;Double&quot;&gt;th&lt;/a&gt;)))
        &lt;span title=&quot;None.type&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt;
          &lt;span title=&quot;object None&quot;&gt;None&lt;/span&gt;
      }
    }
  &lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;apply&lt;/code&gt; method on &lt;code&gt;CartesianPoint&lt;/code&gt; specifies how to construct a &lt;code&gt;PolarPoint&lt;/code&gt; from a pair of (x, y) coordinates. Likewise, the &lt;code&gt;unapply&lt;/code&gt; method specifies how to construct a pair of (x, y) coordinates from a &lt;code&gt;PolarPoint&lt;/code&gt;. It is this second method which is the extractor. It lets us pattern match on &lt;code&gt;PolarPoint&lt;/code&gt;s as if they were &lt;code&gt;CartesianPoint&lt;/code&gt;s. In particular, the &lt;code&gt;isSpecial&lt;/code&gt; method, defined above, can be used unchanged with our new, polar, implementation of points. Extractors let us keep encapsulation even when using pattern matching.&lt;/p&gt;

&lt;h2&gt;A catch (or two)&lt;/h2&gt;

&lt;p&gt;Is that the end of the story of pattern matching and encapsulation? Unfortunately, no. There are two ways in which pattern matching can break encapsulation. The first is through &lt;code&gt;sealed&lt;/code&gt; classes, the second is through singletons.&lt;/p&gt;

&lt;p&gt;A sealed class can only be subclassed within the same file, so the compiler knows statically all the possible subclasses of that class. This lets the Scala compiler check whether a pattern match on a sealed type is &lt;em&gt;exhaustive&lt;/em&gt;. If you forget to check one of the possible subclasses, the Scala compiler will warn you that your match is not exhaustive. Consider the &lt;code&gt;List&lt;/code&gt; class. &lt;code&gt;List&lt;/code&gt; has two subclasses, &lt;code&gt;::&lt;/code&gt; (pronounced &quot;cons&quot;) and &lt;code&gt;Nil&lt;/code&gt;. Cons represents the non-empty &lt;code&gt;List&lt;/code&gt;, with a head and a tail, while &lt;code&gt;Nil&lt;/code&gt; represents the empty List, with no head and no tail. If we try to define a method that matches on a &lt;code&gt;List&lt;/code&gt; but forgets to match the &lt;code&gt;Nil&lt;/code&gt; case:&lt;/p&gt;

  &lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;[T](List[T])T&quot; id=&quot;8952&quot;&gt;head&lt;/a&gt;[&lt;a title=&quot;&amp;gt;: Nothing &amp;lt;: Any&quot; id=&quot;8954&quot;&gt;T&lt;/a&gt;](&lt;a title=&quot;List[T]&quot; id=&quot;8956&quot;&gt;xs&lt;/a&gt;: &lt;span title=&quot;List[T]&quot;&gt;List&lt;/span&gt;[T]): &lt;a href=&quot;#8954&quot; title=&quot;T&quot;&gt;T&lt;/a&gt; = &lt;a href=&quot;#8956&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt; &lt;span title=&quot;T&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
      &lt;span title=&quot;T&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;a title=&quot;T&quot; id=&quot;8983&quot;&gt;hd&lt;/a&gt; :: &lt;a title=&quot;List[T]&quot; id=&quot;8984&quot;&gt;tl&lt;/a&gt; =&amp;gt; &lt;a href=&quot;#8983&quot; title=&quot;T&quot;&gt;hd&lt;/a&gt;
    }
  &lt;/pre&gt;

&lt;p&gt;Then we get a reprimand from the compiler: &lt;code&gt;warning: match is not exhaustive! missing combination Nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we define our own &quot;cons&quot; extractor, we don't get the same warning:&lt;/p&gt;

  &lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;a title=&quot;object PatternMatchingEncapsulation.ex5.:/:&quot; id=&quot;8986&quot;&gt;:/:&lt;/a&gt; {
      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;[T](List[T])Option[(T, List[T])]&quot; id=&quot;8993&quot;&gt;unapply&lt;/a&gt;[&lt;a title=&quot;&amp;gt;: Nothing &amp;lt;: Any&quot; id=&quot;8995&quot;&gt;T&lt;/a&gt;](&lt;a title=&quot;List[T]&quot; id=&quot;8997&quot;&gt;xs&lt;/a&gt;: &lt;span title=&quot;List[T]&quot;&gt;List&lt;/span&gt;[T]) =
        &lt;span title=&quot;Option[(T, List[T])]&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#8997&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt;.&lt;span title=&quot;=&amp;gt; Boolean&quot;&gt;isEmpty&lt;/span&gt;) &lt;span title=&quot;object None&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;((T, List[T]))Some[(T, List[T])]&quot;&gt;Some&lt;/span&gt;(&lt;a href=&quot;#8997&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt;.&lt;a title=&quot;=&amp;gt; T&quot; id=&quot;6770&quot;&gt;head&lt;/a&gt;, &lt;a href=&quot;#8997&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt;.&lt;a title=&quot;=&amp;gt; List[T]&quot; id=&quot;6772&quot;&gt;tail&lt;/a&gt;)
    }

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;[T](List[T])T&quot; id=&quot;8988&quot;&gt;customHead&lt;/a&gt;[&lt;a title=&quot;&amp;gt;: Nothing &amp;lt;: Any&quot; id=&quot;8990&quot;&gt;T&lt;/a&gt;](&lt;a title=&quot;List[T]&quot; id=&quot;9024&quot;&gt;xs&lt;/a&gt;: &lt;span title=&quot;List[T]&quot;&gt;List&lt;/span&gt;[T]): &lt;a href=&quot;#8990&quot; title=&quot;T&quot;&gt;T&lt;/a&gt; = &lt;a href=&quot;#9024&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt; &lt;span title=&quot;T&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
      &lt;span title=&quot;T&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;a title=&quot;T&quot; id=&quot;9028&quot;&gt;hd&lt;/a&gt; &lt;a href=&quot;#8993&quot; title=&quot;(List[T])Option[(T, List[T])]&quot;&gt;:/:&lt;/a&gt; &lt;a title=&quot;List[T]&quot; id=&quot;9029&quot;&gt;tl&lt;/a&gt; =&amp;gt; &lt;a href=&quot;#9028&quot; title=&quot;T&quot;&gt;hd&lt;/a&gt;
    }
  &lt;/pre&gt;

&lt;p&gt;Now, this is a relatively minor problem. The warning is nice to have, but it's not essential. The bigger problem is matching on singletons. The empty &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Nil&lt;/code&gt;, is an implementation detail we can never change. We can simulate the &lt;code&gt;::&lt;/code&gt; case class with an extractor (as above with &lt;code&gt;:/:&lt;/code&gt;, but there is simply no way we can simulate Nil with an extractor. The best we can do requires us to match on &lt;code&gt;MyNil()&lt;/code&gt;, because matching on &lt;code&gt;MyNil&lt;/code&gt; would match on the object, not it's &lt;code&gt;unapply&lt;/code&gt; method.&lt;/p&gt;

  &lt;pre&gt;
    &lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;a title=&quot;object PatternMatchingEncapsulation.ex6.MyNil&quot; id=&quot;9031&quot;&gt;MyNil&lt;/a&gt; {
      &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;[T](List[T])Boolean&quot; id=&quot;9038&quot;&gt;unapply&lt;/a&gt;[&lt;a title=&quot;&amp;gt;: Nothing &amp;lt;: Any&quot; id=&quot;9040&quot;&gt;T&lt;/a&gt;](&lt;a title=&quot;List[T]&quot; id=&quot;9042&quot;&gt;xs&lt;/a&gt;: &lt;span title=&quot;List[T]&quot;&gt;List&lt;/span&gt;[T]): &lt;span title=&quot;Boolean&quot;&gt;Boolean&lt;/span&gt; =
        &lt;span title=&quot;Boolean&quot; class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;a href=&quot;#9042&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt;.&lt;span title=&quot;=&amp;gt; Boolean&quot;&gt;isEmpty&lt;/span&gt;) &lt;span title=&quot;Boolean(true)&quot; class=&quot;keyword&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span title=&quot;Boolean(false)&quot; class=&quot;keyword&quot;&gt;false&lt;/span&gt;
    }

    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;a title=&quot;[T](List[T])Boolean&quot; id=&quot;9033&quot;&gt;empty&lt;/a&gt;[&lt;a title=&quot;&amp;gt;: Nothing &amp;lt;: Any&quot; id=&quot;9035&quot;&gt;T&lt;/a&gt;](&lt;a title=&quot;List[T]&quot; id=&quot;9043&quot;&gt;xs&lt;/a&gt;: &lt;span title=&quot;List[T]&quot;&gt;List&lt;/span&gt;[T]): &lt;span title=&quot;Boolean&quot;&gt;Boolean&lt;/span&gt; = &lt;a href=&quot;#9043&quot; title=&quot;List[T]&quot;&gt;xs&lt;/a&gt; &lt;span title=&quot;Boolean&quot; class=&quot;keyword&quot;&gt;match&lt;/span&gt; {
      &lt;span title=&quot;Boolean(true)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;a href=&quot;#9038&quot; title=&quot;(List[T])Boolean&quot;&gt;MyNil&lt;/a&gt;() =&amp;gt; &lt;span title=&quot;Boolean(true)&quot; class=&quot;keyword&quot;&gt;true&lt;/span&gt;
      &lt;span title=&quot;Boolean(false)&quot; class=&quot;keyword&quot;&gt;case&lt;/span&gt; _ =&amp;gt; &lt;span title=&quot;Boolean(false)&quot; class=&quot;keyword&quot;&gt;false&lt;/span&gt;
    }
  &lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don't want people to get me wrong: I love pattern matching. Practically every day I'm grateful that Scala has it. It makes certain kinds of programming problems much easier to solve. (I discuss the kinds of problems that benefit from pattern matching vs OO-style inheritance and virtual method dispatch &lt;a href=&quot;http://stackoverflow.com/questions/563369/does-scalas-pattern-matching-violate-the-open-closed-principle&quot;&gt;this StackOverflow question&lt;/a&gt;.) However, library designers should be conscious of the implementation details they might be exposing if they're letting their users pattern match on sealed classes or singletons. Pattern matching can be very powerful, but as with many things in Scala: with great power comes great responsibility.&lt;/p&gt;</content>
   <author>
     <name>Jorge Ortiz</name>
     <uri>http://uncountablymany.com</uri>
   </author>
 </entry>
 
 <entry>
   <title>Facebook Ads: Fail</title>
   <link href="http://uncountablymany.com/2009/01/01/facebook-ads-fail.html"/>
   <updated>2009-01-01T00:00:00-08:00</updated>
   <id>http://uncountablymany.com/2009/01/01/facebook-ads-fail</id>
   <content type="html">&lt;p&gt;One of Facbeook&amp;#8217;s monetizations strategies has been to imitate Google&amp;#8217;s very successful AdWords program, which places small, targeted, and unobtrusive text ads next to Google&amp;#8217;s search results. AdWords accounts for a large part of Google&amp;#8217;s considerable revenues, but Facebook has not enjoyed similar success with their own ads. There are many reasons why Google&amp;#8217;s ads work and Facebook&amp;#8217;s ads fail, but today I just want to mention one particular failure on Facebook&amp;#8217;s part: Facebook shows me ads when I don&amp;#8217;t want to see them, and when I do want to see ads Facebook makes it impossible for me to do so.&lt;/p&gt;
&lt;p&gt;First, consider Google. When I don&amp;#8217;t want to see ads, Google makes it easy for me to ignore them. Google&amp;#8217;s ads are small, text-only, set to one side, and are clearly labeled as advertisements. This empowerment to easily ignore ads keeps me happy as a user and coming back to Google for search. However, for certain search terms (like &amp;#8220;flowers&amp;#8221; or &amp;#8220;divorce lawyer&amp;#8221;) it&amp;#8217;s likely that I&amp;#8217;m looking for a certain product or service and actually want to see ads. When I want to see ads, Google makes it easy for me to do so: they&amp;#8217;re right there.&lt;/p&gt;
&lt;p&gt;Now consider Facebook. When I don&amp;#8217;t want to see ads, Facebook makes it just as easy as Google for me to ignore them. Facebook&amp;#8217;s ads are similarly small, set to one side, and clearly labeled as advertisements. What about when I want to see ads? Facebook doesn&amp;#8217;t run a general purpose search engine, so they don&amp;#8217;t know when I&amp;#8217;m looking to buy flowers or get a divorce lawyer. (Maybe some day they&amp;#8217;ll figure out that my mom&amp;#8217;s birthday is coming up or that my spouse just cheated on me and posted video evidence of the infidelity to Facebook, but they&amp;#8217;re not quite there yet.) However, there are times when I find myself wanting to look at ads on Facebook: in the split-second after I click a link and I&amp;#8217;m waiting for the next page to load, I have nothing better to do so my eyes wander and I glance at the ads that I had previously ignored. Every once in a while I skim an ad that actually piques my interest. I want to know more, but by then it&amp;#8217;s too late. A new page has loaded, and with it a new ad. Perplexingly, hitting the &amp;#8216;Back&amp;#8217; button on my browser shows me the page I was previously on, but not the same ad that was previously on it. Yes, there have been Facebook ads compelling enough to make me interrupt my normal web browsing flow and go back a page on my browser just to give the ad a second look, and maybe even click on it, but Facebook chooses to show me a different ad instead.&lt;/p&gt;
&lt;p&gt;Major Fail.&lt;/p&gt;</content>
   <author>
     <name>Jorge Ortiz</name>
     <uri>http://uncountablymany.com</uri>
   </author>
 </entry>
 
</feed>